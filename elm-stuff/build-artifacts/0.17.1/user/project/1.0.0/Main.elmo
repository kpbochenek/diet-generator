var _user$project$Main$checkWarning = function (model) {
	return !_elm_lang$core$Native_Utils.eq((model.protein + model.carbohydrates) + model.fat, 100);
};
var _user$project$Main$convertToInt = function (v) {
	return A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(v));
};
var _user$project$Main$displayPercent = function (v) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(v),
		' %');
};
var _user$project$Main$displayGram = function (v) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(v),
		' g');
};
var _user$project$Main$handleSelectHtml = A2(
	_elm_lang$core$Json_Decode$andThen,
	_elm_lang$html$Html_Events$targetValue,
	function (val) {
		var _p0 = _elm_lang$core$String$toInt(val);
		if (_p0.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p0._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(_p0._0);
		}
	});
var _user$project$Main$warningWhenNotSum = function (model) {
	var _p1 = _user$project$Main$checkWarning(model);
	if (_p1 === true) {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'backgroundColor', _1: 'red'}
				]));
	} else {
		return _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'visibility', _1: 'hidden'}
				]));
	}
};
var _user$project$Main$initModel = {calories: 1500, protein: 20, carbohydrates: 60, fat: 20, meals: 4};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'UpdateCalories':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						calories: _user$project$Main$convertToInt(_p2._0)
					});
			case 'UpdateProtein':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						protein: _user$project$Main$convertToInt(_p2._0)
					});
			case 'UpdateCarbohydrates':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						carbohydrates: _user$project$Main$convertToInt(_p2._0)
					});
			case 'UpdateFat':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						fat: _user$project$Main$convertToInt(_p2._0)
					});
			case 'UpdateMeals':
				return _elm_lang$core$Native_Utils.update(
					model,
					{meals: _p2._0});
			case 'GenerateDiet':
				return model;
			default:
				return _user$project$Main$initModel;
		}
	});
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {calories: a, protein: b, carbohydrates: c, fat: d, meals: e};
	});
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$GenerateDiet = {ctor: 'GenerateDiet'};
var _user$project$Main$UpdateMeals = function (a) {
	return {ctor: 'UpdateMeals', _0: a};
};
var _user$project$Main$UpdateFat = function (a) {
	return {ctor: 'UpdateFat', _0: a};
};
var _user$project$Main$UpdateCarbohydrates = function (a) {
	return {ctor: 'UpdateCarbohydrates', _0: a};
};
var _user$project$Main$UpdateProtein = function (a) {
	return {ctor: 'UpdateProtein', _0: a};
};
var _user$project$Main$UpdateCalories = function (a) {
	return {ctor: 'UpdateCalories', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('kalorie: '),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$required(true),
								_elm_lang$html$Html_Attributes$type$('text'),
								_elm_lang$html$Html_Attributes$placeholder('Kalorie'),
								_elm_lang$html$Html_Attributes$value(
								_elm_lang$core$Basics$toString(model.calories)),
								_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateCalories)
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Bialko: '),
								A2(
								_elm_lang$html$Html$input,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$type$('range'),
										_elm_lang$html$Html_Attributes$min('0'),
										_elm_lang$html$Html_Attributes$max('100'),
										_elm_lang$html$Html_Attributes$value(
										_elm_lang$core$Basics$toString(model.protein)),
										_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateProtein)
									]),
								_elm_lang$core$Native_List.fromArray(
									[])),
								_elm_lang$html$Html$text(
								_user$project$Main$displayPercent(model.protein))
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Weglowodany: '),
								A2(
								_elm_lang$html$Html$input,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$type$('range'),
										_elm_lang$html$Html_Attributes$min('0'),
										_elm_lang$html$Html_Attributes$max('100'),
										_elm_lang$html$Html_Attributes$value(
										_elm_lang$core$Basics$toString(model.carbohydrates)),
										_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateCarbohydrates)
									]),
								_elm_lang$core$Native_List.fromArray(
									[])),
								_elm_lang$html$Html$text(
								_user$project$Main$displayPercent(model.carbohydrates))
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Tluszcze: '),
								A2(
								_elm_lang$html$Html$input,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$type$('range'),
										_elm_lang$html$Html_Attributes$min('0'),
										_elm_lang$html$Html_Attributes$max('100'),
										_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateFat)
									]),
								_elm_lang$core$Native_List.fromArray(
									[])),
								_elm_lang$html$Html$text(
								_user$project$Main$displayPercent(model.fat))
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Main$warningWhenNotSum(model)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Proporcje nie sumuja sie do 100% --> ',
							_elm_lang$core$Basics$toString((model.protein + model.carbohydrates) + model.fat)))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Ilosc posilkow: '),
						A2(
						_elm_lang$html$Html$select,
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html_Events$on,
								'change',
								A2(_elm_lang$core$Json_Decode$map, _user$project$Main$UpdateMeals, _user$project$Main$handleSelectHtml))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$option,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$selected(
										_elm_lang$core$Native_Utils.eq(model.meals, 3))
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('3')
									])),
								A2(
								_elm_lang$html$Html$option,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$selected(
										_elm_lang$core$Native_Utils.eq(model.meals, 4))
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('4')
									])),
								A2(
								_elm_lang$html$Html$option,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$selected(
										_elm_lang$core$Native_Utils.eq(model.meals, 5))
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('5')
									]))
							])),
						A2(
						_elm_lang$html$Html$hr,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						_elm_lang$html$Html$text('Zapotrzebowanie na substancje od≈ºywcze: '),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Bialko: '),
										_elm_lang$html$Html$text(
										_user$project$Main$displayGram(((((model.calories * model.protein) / 4) | 0) / 100) | 0))
									])),
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Weglowodany: '),
										_elm_lang$html$Html$text(
										_user$project$Main$displayGram(((((model.calories * model.carbohydrates) / 4) | 0) / 100) | 0))
									])),
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Tluszcze: '),
										_elm_lang$html$Html$text(
										_user$project$Main$displayGram(((((model.calories * model.fat) / 9) | 0) / 100) | 0))
									]))
							])),
						A2(
						_elm_lang$html$Html$hr,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$GenerateDiet)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Generuj plan')
									])),
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$Reset)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Resetuj')
									]))
							]))
					])),
				A2(
				_elm_lang$html$Html$hr,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$Main$initModel, view: _user$project$Main$view, update: _user$project$Main$update})
};
